//在8*8的棋盘上，放置8个皇后，使两两之间互不攻击。
//逐行放置皇后
//安全条件数组：L：右斜线，R：左斜线，C：列；
//q为皇后位置；

#include <iostream>
using namespace std;

int num=0;
int Q[9];
bool C[9];
bool R[17];
bool L[17];

void Try(int i){
    for(int j=1;j<=9;j++){
        bool right=C[j]&&L[i-j+9]&&R[i+j];
        if(!right){}
        else{
            Q[i]=j;
            C[j]=false;
            L[i-j+9]=false;
            R[i+j]=false;
            if(i<8){
                Try(i+1);
            }
            else if(i==8){
                for(int g=1;g<=8;g++){
                    cout<<Q[g]<<" ";
                }
                cout<<endl;
                num++;
            }
            Q[i]=0;
            C[j]= true;
            L[i-j+9]= true;
            R[i+j]= true;
        }
    }
}

int main() {
    for(int y=1;y<=8;y++){
        C[y]= true;
    }
    for(int z=2;z<=16;z++){
        R[z]= true;
        L[z]= true;
    }
    Try(1);
    cout<<"The total solution number: "<<num<<endl;
    return 0;
}

//输出：
//{"C:\Users\zhy\CLionProjects\8-queens problem\cmake-build-debug\8_queens_problem.exe"
//1 5 8 6 3 7 2 4
//1 6 8 3 7 4 2 5
//1 7 4 6 8 2 5 3
//1 7 5 8 2 4 6 3
//2 4 6 8 3 1 7 5
//2 5 7 1 3 8 6 4
//2 5 7 4 1 8 6 3
//2 6 1 7 4 8 3 5
//2 6 8 3 1 4 7 5
//2 7 3 6 8 5 1 4
//2 7 5 8 1 4 6 3
//2 8 6 1 3 5 7 4
//3 1 7 5 8 2 4 6
//3 5 2 8 1 7 4 6
//3 5 2 8 6 4 7 1
//3 5 7 1 4 2 8 6
//3 5 8 4 1 7 2 6
//3 6 2 5 8 1 7 4
//3 6 2 7 1 4 8 5
//3 6 2 7 5 1 8 4
//3 6 4 1 8 5 7 2
//3 6 4 2 8 5 7 1
//3 6 8 1 4 7 5 2
//3 6 8 1 5 7 2 4
//3 6 8 2 4 1 7 5
//3 7 2 8 5 1 4 6
//3 7 2 8 6 4 1 5
//3 8 4 7 1 6 2 5
//4 1 5 8 2 7 3 6
//4 1 5 8 6 3 7 2
//4 2 5 8 6 1 3 7
//4 2 7 3 6 8 1 5
//4 2 7 3 6 8 5 1
//4 2 7 5 1 8 6 3
//4 2 8 5 7 1 3 6
//4 2 8 6 1 3 5 7
//4 6 1 5 2 8 3 7
//4 6 8 2 7 1 3 5
//4 6 8 3 1 7 5 2
//4 7 1 8 5 2 6 3
//4 7 3 8 2 5 1 6
//4 7 5 2 6 1 3 8
//4 7 5 3 1 6 8 2
//4 8 1 3 6 2 7 5
//4 8 1 5 7 2 6 3
//4 8 5 3 1 7 2 6
//5 1 4 6 8 2 7 3
//5 1 8 4 2 7 3 6
//5 1 8 6 3 7 2 4
//5 2 4 6 8 3 1 7
//5 2 4 7 3 8 6 1
//5 2 6 1 7 4 8 3
//5 2 8 1 4 7 3 6
//5 3 1 6 8 2 4 7
//5 3 1 7 2 8 6 4
//5 3 8 4 7 1 6 2
//5 7 1 3 8 6 4 2
//5 7 1 4 2 8 6 3
//5 7 2 4 8 1 3 6
//5 7 2 6 3 1 4 8
//5 7 2 6 3 1 8 4
//5 7 4 1 3 8 6 2
//5 8 4 1 3 6 2 7
//5 8 4 1 7 2 6 3
//6 1 5 2 8 3 7 4
//6 2 7 1 3 5 8 4
//6 2 7 1 4 8 5 3
//6 3 1 7 5 8 2 4
//6 3 1 8 4 2 7 5
//6 3 1 8 5 2 4 7
//6 3 5 7 1 4 2 8
//6 3 5 8 1 4 2 7
//6 3 7 2 4 8 1 5
//6 3 7 2 8 5 1 4
//6 3 7 4 1 8 2 5
//6 4 1 5 8 2 7 3
//6 4 2 8 5 7 1 3
//6 4 7 1 3 5 2 8
//6 4 7 1 8 2 5 3
//6 8 2 4 1 7 5 3
//7 1 3 8 6 4 2 5
//7 2 4 1 8 5 3 6
//7 2 6 3 1 4 8 5
//7 3 1 6 8 5 2 4
//7 3 8 2 5 1 6 4
//7 4 2 5 8 1 3 6
//7 4 2 8 6 1 3 5
//7 5 3 1 6 8 2 4
//8 2 4 1 7 5 3 6
//8 2 5 3 1 7 4 6
//8 3 1 6 2 5 7 4
//8 4 1 3 6 2 7 5
//The total solution number: 92}
